import os
import time
import random
import string
from datetime import datetime
from typing import Dict, Any, List

import streamlit as st

# ============ PAGE CONFIG ============
st.set_page_config(
    page_title="HILAN ‚Äì Human-in-the-Loop AI",
    page_icon="ü§ñ",
    layout="wide",
)

# ============ OPENAI CLIENT (REAL AI) ============
# Uses modern OpenAI SDK (>=1.0)
# Put your key in Streamlit Cloud:  Settings ‚Üí Secrets ‚Üí add OPENAI_API_KEY
OPENAI_OK = False
MODEL_NAME = st.secrets.get("OPENAI_MODEL", "gpt-4o-mini")

try:
    from openai import OpenAI
    _OPENAI_API_KEY = st.secrets.get("OPENAI_API_KEY", os.getenv("OPENAI_API_KEY"))
    if _OPENAI_API_KEY:
        client = OpenAI(api_key=_OPENAI_API_KEY)
        OPENAI_OK = True
except Exception:
    OPENAI_OK = False


def ai_draft_from_openai(question: str) -> str:
    """
    Calls OpenAI Chat Completions to produce a concise, structured draft.
    Includes guardrails: short answer + bullets + mini disclaimer.
    """
    prompt = f"""
You are the AI draft engine for HILAN (Human-in-the-Loop AI).
Answer the user's question briefly and clearly. Use a short paragraph and 3‚Äì5 bullet points.
Avoid speculation; if something is uncertain, say so. Do not fabricate sources.

Question: {question.strip()}
"""
    try:
        resp = client.chat.completions.create(
            model=MODEL_NAME,
            messages=[
                {"role": "system", "content": "You write concise, factual drafts for human validators."},
                {"role": "user", "content": prompt},
            ],
            temperature=0.2,
            max_tokens=350,
        )
        text = resp.choices[0].message.content.strip()
        return f"AI Draft:\n{text}\n\n‚Äî Generated by {MODEL_NAME} at {now_iso()}"
    except Exception as e:
        return f"AI Draft Error: {e}"


# ============ SIMPLE HELPERS / IN-MEMORY 'DB' ============
def now_iso() -> str:
    return datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")


def gen_id(prefix: str = "Q", n: int = 6) -> str:
    return f"{prefix}-" + "".join(random.choices(string.ascii_uppercase + string.digits, k=n))


if "db" not in st.session_state:
    st.session_state.db: Dict[str, Any] = {
        "queries": [],      # list of tickets
        "validators": {},   # username -> profile
        "ledger": [],       # payouts
    }

if "seeded" not in st.session_state:
    st.session_state.seeded = True
    st.session_state.db["validators"]["alice"] = {"name": "Alice", "reputation": 3.9, "tasks_done": 14, "balance_eur": 6.80}
    st.session_state.db["validators"]["bob"]   = {"name": "Bob",   "reputation": 4.4, "tasks_done": 31, "balance_eur": 19.10}

# ============ SIDEBAR ============
with st.sidebar:
    st.markdown("## ü§ñ HILAN")
    st.caption("Human-Verified AI answers.\nTrust via real people in the loop.")
    role = st.radio("Choose role", ["User", "Validator", "Admin"])
    st.divider()
    st.markdown("**AI backend**")
    st.caption(f"Model: `{MODEL_NAME}`")
    st.caption("Status: " + ("‚úÖ Connected" if OPENAI_OK else "‚ö†Ô∏è No API key found (using offline mode)"))
    st.divider()
    st.markdown("**How to demo**")
    st.caption("1) Ask a question (User) ‚Üí 2) Validate (Validator) ‚Üí 3) See verified result (User).")


# ============ USER VIEW ============
if role == "User":
    st.markdown("# üßë‚Äçüíª Ask a Question")
    colL, colR = st.columns([2, 1], vertical_alignment="top")

    with colL:
        question = st.text_area("Type your question:", placeholder="e.g., How can an SME adopt AI safely without high risk?")
        requester = st.text_input("Your name (for the record):", value="Guest")

        c1, c2 = st.columns(2)
        if c1.button("‚ú® Generate AI Draft", use_container_width=True, disabled=(not question.strip())):
            with st.spinner("Calling the AI model..."):
                time.sleep(0.2)
                if OPENAI_OK:
                    draft = ai_draft_from_openai(question)
                else:
                    # Offline fallback: tiny local template (so demo still works)
                    draft = f"AI Draft:\n‚Ä¢ Summary for: {question.strip()}\n‚Ä¢ Key steps: start small, add human oversight, set policies, measure impact.\n‚Äî Offline mode at {now_iso()}"
                st.session_state["last_draft"] = draft
                st.success("AI draft generated below.")

        if "last_draft" in st.session_state:
            st.markdown("#### AI Draft")
            st.info(st.session_state["last_draft"])

        if c2.button("üì§ Send for Human Verification", use_container_width=True, disabled=("last_draft" not in st.session_state)):
            qid = gen_id()
            row = {
                "id": qid,
                "created_at": now_iso(),
                "requester": requester or "Guest",
                "question": question.strip(),
                "ai_answer": st.session_state["last_draft"],
                "verified_answer": "",
                "status": "PENDING",
                "assigned_to": None,
                "history": [
                    {"at": now_iso(), "event": "CREATED"},
                    {"at": now_iso(), "event": "AI_DRAFT_GENERATED"},
                ],
            }
            st.session_state.db["queries"].insert(0, row)
            del st.session_state["last_draft"]
            st.success(f"Sent for human verification. Ticket ID: **{qid}**")

    with colR:
        st.markdown("### üìú Your Recent Tickets")
        my_qs = [q for q in st.session_state.db["queries"] if q["requester"] == (requester or "Guest")]
        if not my_qs:
            st.caption("No tickets yet. Submit your first question on the left.")
        else:
            for q in my_qs[:6]:
                with st.container(border=True):
                    status_emoji = "üü¢" if q["status"] == "APPROVED" else ("üü†" if q["status"] == "PENDING" else "üî¥")
                    st.markdown(f"**{status_emoji} {q['status']}** ‚Äî **ID:** {q['id']}  ¬∑  **At:** {q['created_at']}")
                    st.markdown(f"**Question:** {q['question']}")
                    with st.expander("AI Draft", expanded=False):
                        st.code(q["ai_answer"])
                    if q["status"] == "APPROVED":
                        st.markdown("**‚úÖ Human-Verified Answer**")
                        st.success(q["verified_answer"])
                    elif q["status"] == "REJECTED":
                        st.error("Validator rejected this draft. Consider resubmitting with more context.")


# ============ VALIDATOR VIEW ============
elif role == "Validator":
    st.markdown("# üõ†Ô∏è Validator Console")

    uname = st.selectbox("Logged in as validator:", options=list(st.session_state.db["validators"].keys()))
    v = st.session_state.db["validators"][uname]

    m1, m2, m3, m4 = st.columns(4)
    m1.metric("Reputation", f"{v['reputation']:.1f}/5")
    m2.metric("Tasks Done", v["tasks_done"])
    m3.metric("Balance", f"‚Ç¨{v['balance_eur']:.2f}")
    m4.caption(now_iso())
    st.divider()

    left, right = st.columns([1.45, 1])

    with left:
        st.markdown("### üì• Pending Queue")
        pending = [q for q in st.session_state.db["queries"] if q["status"] == "PENDING"]
        if not pending:
            st.info("No pending tasks right now.")
        else:
            picked_id = st.selectbox("Select a ticket to review:", [q["id"] for q in pending])
            ticket = next(q for q in pending if q["id"] == picked_id)

            with st.container(border=True):
                st.markdown(f"**ID:** {ticket['id']}  ¬∑  **Created:** {ticket['created_at']}  ¬∑  **Requester:** {ticket['requester']}")
                st.markdown("**Question**")
                st.write(ticket["question"])
                st.markdown("**AI Draft**")
                st.code(ticket["ai_answer"])

                action = st.radio("Action", ["Approve", "Edit", "Reject"], horizontal=True)
                edited = ""
                if action == "Edit":
                    # Start from AI draft but change prefix
                    base = ticket["ai_answer"].replace("AI Draft", "Human-Verified")
                    edited = st.text_area("Proposed Human-Verified Answer", value=base, height=200)

                c1, c2, c3 = st.columns(3)
                reward_approve = 0.40
                reward_edit = 0.75
                reward_reject = 0.15

                if c1.button("‚úÖ Approve", use_container_width=True, disabled=(action != "Approve")):
                    ticket["verified_answer"] = ticket["ai_answer"].replace("AI Draft", "Human-Verified")
                    ticket["status"] = "APPROVED"
                    ticket["assigned_to"] = uname
                    ticket["history"].append({"at": now_iso(), "event": "APPROVED"})
                    v["tasks_done"] += 1
                    v["balance_eur"] += reward_approve
                    st.session_state.db["ledger"].append({"at": now_iso(), "validator": uname, "qid": ticket["id"], "type": "APPROVE", "amount": reward_approve})
                    st.success(f"Approved. üí∏ +‚Ç¨{reward_approve:.2f}")
                    time.sleep(0.5)
                    st.rerun()

                if c2.button("‚úèÔ∏è Save Edit", use_container_width=True, disabled=(action != "Edit" or not edited.strip())):
                    ticket["verified_answer"] = edited.strip()
                    ticket["status"] = "APPROVED"
                    ticket["assigned_to"] = uname
                    ticket["history"].append({"at": now_iso(), "event": "EDITED"})
                    v["tasks_done"] += 1
                    v["balance_eur"] += reward_edit
                    st.session_state.db["ledger"].append({"at": now_iso(), "validator": uname, "qid": ticket["id"], "type": "EDIT", "amount": reward_edit})
                    st.success(f"Edited & approved. üí∏ +‚Ç¨{reward_edit:.2f}")
                    time.sleep(0.5)
                    st.rerun()

                if c3.button("‚õî Reject", use_container_width=True, disabled=(action != "Reject")):
                    ticket["status"] = "REJECTED"
                    ticket["assigned_to"] = uname
                    ticket["history"].append({"at": now_iso(), "event": "REJECTED"})
                    v["tasks_done"] += 1
                    v["balance_eur"] += reward_reject
                    st.session_state.db["ledger"].append({"at": now_iso(), "validator": uname, "qid": ticket["id"], "type": "REJECT", "amount": reward_reject})
                    st.warning(f"Rejected. üí∏ +‚Ç¨{reward_reject:.2f}")
                    time.sleep(0.5)
                    st.rerun()

    with right:
        st.markdown("### üíº Recent Payouts")
        moves = [m for m in st.session_state.db["ledger"] if m["validator"] == uname]
        if not moves:
            st.caption("No payouts yet.")
        else:
            for m in reversed(moves[-8:]):
                with st.container(border=True):
                    st.markdown(f"**{m['type']}** ‚Üí **{m['qid']}**")
                    st.caption(m["at"])
                    st.metric("Amount", f"‚Ç¨{m['amount']:.2f}")


# ============ ADMIN VIEW ============
else:
    st.markdown("# üìä Admin ‚Äì Network Metrics (Demo)")
    qs: List[Dict[str, Any]] = st.session_state.db["queries"]
    total = len(qs)
    pending = sum(1 for q in qs if q["status"] == "PENDING")
    approved = sum(1 for q in qs if q["status"] == "APPROVED")
    rejected = sum(1 for q in qs if q["status"] == "REJECTED")

    c1, c2, c3, c4 = st.columns(4)
    c1.metric("Total Tickets", total)
    c2.metric("Pending", pending)
    c3.metric("Approved", approved)
    c4.metric("Rejected", rejected)

    st.divider()
    st.markdown("### Latest Tickets")
    if not qs:
        st.info("No tickets yet. Ask something from the User tab.")
    else:
        for q in qs[:12]:
            with st.container(border=True):
                st.markdown(f"**ID:** {q['id']} | **Status:** {q['status']} | **By:** {q['requester']} | **At:** {q['created_at']}")
                st.write("**Q:**", q["question"])
                with st.expander("AI Draft"):
                    st.code(q["ai_answer"])
                if q["verified_answer"]:
                    st.markdown("**Human-Verified:**")
                    st.success(q["verified_answer"])

    st.divider()
    st.markdown("### Validators")
    colA, colB = st.columns(2)
    with colA:
        for uname, prof in st.session_state.db["validators"].items():
            with st.container(border=True):
                st.markdown(f"**{prof['name']}** (`{uname}`)")
                st.metric("Reputation", f"{prof['reputation']:.1f}/5")
                st.metric("Tasks", prof["tasks_done"])
                st.metric("Balance", f"‚Ç¨{prof['balance_eur']:.2f}")
    with colB:
        st.markdown("#### Adjust Reputation (demo)")
        sel = st.selectbox("Pick validator", options=list(st.session_state.db["validators"].keys()))
        delta = st.slider("Œî Reputation", -0.5, 0.5, 0.1, 0.1)
        if st.button("Apply change"):
            prof = st.session_state.db["validators"][sel]
            prof["reputation"] = max(1.0, min(5.0, prof["reputation"] + delta))
            st.success("Updated.")
            time.sleep(0.3)
            st.rerun()

st.write("")
st.caption("Prototype ‚Ä¢ HILAN ‚Äì Human-in-the-Loop AI ‚Ä¢ Session data is ephemeral (in-memory).")

